



/*
 * Zero out the gpu result buffers.
 */
__kernel void clearResultBuffer(__global uchar *left_result,
                                __global uchar *right_result,
                                __global uchar *diff_map) {

    const int x = get_global_id(0);
    const int y = get_global_id(1);

    left_result[y * WIDTH + x] = 0;
    right_result[y * WIDTH + x] = 0;
    diff_map[y * WIDTH + x] = 255;
}

/*
 * Block matching stereo matching algorithm
 */
__kernel void calculateDisparity(const __global uchar *img_l,
                                 const __global uchar *img_r,
                                 __global uchar *result) {

    const int x = get_global_id(0), y = get_global_id(1);
    const int offset_x = x - AGGR_RADIUS;
    const int offset_y = y - AGGR_RADIUS;


    if(offset_x >= 0 && offset_x + AGGR_DIM < WIDTH) {
        unsigned int sum = 0, best_sum = -1, best_d = 0;
        for(int d = 0; d < MAX_DISP; d++) {
            for(int i = offset_y; i < AGGR_DIM + offset_y; i++) {
                for(int j = offset_x; j < AGGR_DIM + offset_x; j++) {
                    sum += abs((int)img_l[i * WIDTH + j] - (int)img_r[i * WIDTH + j - d]);
                }
            }
            if(sum < best_sum) {
                best_sum = sum;
                best_d = d;
            }
            sum = 0;
        }
        result[y * WIDTH + x] = best_d;
    }
}


/*
 * Block matching, uses local memory
 */
__kernel void calculateDisparityLMEM(const __global uchar *img_l,
                                     const __global uchar *img_r,
                                     __global uchar *result,
                                     __global uchar *prev_result,
                                     __local uchar *local_left,
                                     const int local_left_width,
                                     const int local_left_height,
                                     __local uchar *local_right,
                                     const int local_right_width,
                                     const int local_right_height,
                                     __global uchar *diff_map) {


    const int2 gid;
    const int2 lid;
    gid.x = get_global_id(0); gid.y = get_global_id(1);
    lid.x = get_local_id(0);  lid.y = get_local_id(1);

    int current_sum = 0;
    uint best_sum = -1;
    int best_disparity = 0;

    int i = 0;
    int j = 0;
    int d = 0;

    //    if(gid.x < width && gid.y < height) {

    if(diff_map[gid.y * WIDTH + gid.x] == 0) {
        result[gid.y * WIDTH + gid.x] = prev_result[gid.y * WIDTH + gid.x];
        return;
    }

    /* fill the left local memory buffer */
    for(i = 0; i < local_left_height; i += get_local_size(1)) {
        for(j = 0; j < local_left_width; j += get_local_size(0)) {
            local_left[(lid.y + i) * local_left_width + (lid.x + j)] =
                img_l[((gid.y + i - AGGR_RADIUS) * PADDED_WIDTH + (gid.x - AGGR_RADIUS + j))];
        }
    }

    /* fill the right local memory buffer */
    for(i = 0; i < local_right_height; i += get_local_size(1)) {
        for(j = 0; j < local_right_width; j += get_local_size(0)) {
            local_right[(lid.y + i) * local_right_width + (lid.x + j)] =
                img_r[((gid.y - AGGR_RADIUS + i) * PADDED_WIDTH + (gid.x - AGGR_RADIUS + j - MAX_DISP))];
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);


    /* Finally, find the best match */
    for(d = 0; d < MAX_DISP; d++) {
        for(i = 0; i < AGGR_DIM; i++) {
            for(j = 0; j < AGGR_DIM; j++) {
#ifdef USE_SAD
                current_sum += abs(local_left[(lid.y+i) * local_left_width + (lid.x+j)] -
                                   local_right[(lid.y+i) * local_right_width + (lid.x+j) - d + MAX_DISP]);
#else
                int diff = local_left[(lid.y+i) * local_left_width + (lid.x+j)] -
                    local_right[(lid.y+i) * local_right_width + (lid.x+j) - d + MAX_DISP];
                current_sum += diff*diff;
#endif
            }
        }
        if(current_sum < best_sum) {
            best_sum = current_sum;
            best_disparity = d;
        }
        current_sum = 0;
    }

    barrier(CLK_LOCAL_MEM_FENCE);

    result[gid.y * WIDTH + gid.x] = best_disparity;
}


/*
 * Block matching, uses local memory, produces left and right
 * disparity map
 */
__kernel void calculateDisparityDual(const __global uchar *img_l,
                                     const __global uchar *img_r,
                                     __global uchar *result_l,
                                     __global uchar *result_r,
                                     const __global uchar *prev_result_l,
                                     const __global uchar *prev_result_r,
                                     __local uchar *local_left,
                                     __local uchar *local_right,
                                     const int local_width,
                                     const int local_height,
                                     __global uchar *diff_map
                                     ) {

    const int2 gid;
    const int2 lid;
    gid.x = get_global_id(0); gid.y = get_global_id(1);
    lid.x = get_local_id(0);  lid.y = get_local_id(1);

    if(diff_map[gid.y * WIDTH + gid.x] == 0) {
        result_l[gid.y * WIDTH + gid.x] = prev_result_l[gid.y * WIDTH + gid.x];
        result_r[gid.y * WIDTH + gid.x] = prev_result_r[gid.y * WIDTH + gid.x];
        return;
    }


    int current_right_sum = 0;
    int current_left_sum = 0;
    uint best_left_sum = -1;
    uint best_right_sum = -1;
    uchar best_left_disparity = 0;
    uchar best_right_disparity = 0;

    int i = 0;
    int j = 0;
    int d = 0;

    /* fill the left local memory buffer */
    for(i = 0; i < local_height; i += get_local_size(1)) {
        for(j = 0; j < local_width; j += get_local_size(0)) {

            local_left[(lid.y + i) * local_width + (lid.x + j)] =
                img_l[((gid.y - AGGR_RADIUS + i) * PADDED_WIDTH) + gid.x - AGGR_RADIUS + j];

            local_right[(lid.y + i) * local_width + (lid.x + j)] =
                img_r[((gid.y - AGGR_RADIUS + i) * PADDED_WIDTH) + gid.x - AGGR_RADIUS + j - MAX_DISP];

        }
    }

    barrier(CLK_LOCAL_MEM_FENCE);

    /* find the best match */
    for(d = 0; d < MAX_DISP; d++) {
        for(i = 0; i < AGGR_DIM; i++) {
            for(j = 0; j < AGGR_DIM; j++) {
#ifdef USE_SAD
                current_left_sum += abs(local_left[((lid.y+i) * local_width) + lid.x + j] -
                                        local_right[((lid.y+i) * local_width) + lid.x + j - d + MAX_DISP]);

                /* current_right_sum += abs(local_right[((lid.y+i) * local_width) + lid.x + j + MAX_DISP] - */
                /*                          local_left[((lid.y+i) * local_width) + lid.x + j + d]); */
#else
                int diff_left = local_left[((lid.y+i) * local_width) + lid.x + j] -
                    local_right[((lid.y+i) * local_width) + lid.x + j - d + MAX_DISP];
                /* int diff_right = local_right[((lid.y+i) * local_width) + lid.x + j + MAX_DISP] - */
                /*     local_left[((lid.y+i) * local_width) + lid.x + j + d]; */
                current_left_sum += diff_left * diff_left;
                /* current_right_sum += diff_right * diff_right; */
#endif
            }
        }

        if(current_left_sum < best_left_sum) {
            best_left_sum = current_left_sum;
            best_left_disparity = d;
        }
        current_left_sum = 0;

        /* if(current_right_sum < best_right_sum) { */
        /*     best_right_sum = current_right_sum; */
        /*     best_right_disparity = d; */
        /* } */
        /* current_right_sum = 0; */

    }

    /* find the best match */
    for(d = 0; d < MAX_DISP; d++) {
        for(i = 0; i < AGGR_DIM; i++) {
            for(j = 0; j < AGGR_DIM; j++) {
#ifdef USE_SAD
                current_right_sum += abs(local_right[((lid.y+i) * local_width) + lid.x + j + MAX_DISP] -
                                         local_left[((lid.y+i) * local_width) + lid.x + j + d]);
#else
                int diff_right = local_right[((lid.y+i) * local_width) + lid.x + j + MAX_DISP] -
                    local_left[((lid.y+i) * local_width) + lid.x + j + d];
                current_right_sum += diff_right * diff_right;
#endif
            }
        }

        if(current_right_sum < best_right_sum) {
            best_right_sum = current_right_sum;
            best_right_disparity = d;
        }
        current_right_sum = 0;

    }

    barrier(CLK_LOCAL_MEM_FENCE);

    if(gid.x < WIDTH && gid.y < HEIGHT) {
        result_l[gid.y * WIDTH + gid.x] = best_left_disparity;
        result_r[gid.y * WIDTH + gid.x] = best_right_disparity;
    }
}




__kernel void createMipMap(__read_only image2d_t left,
                           __read_only image2d_t right,
                           __global uchar *l,
                           __global uchar *r) {

    const sampler_t sampler = CLK_NORMALIZED_COORDS_FALSE | CLK_ADDRESS_CLAMP | CLK_FILTER_LINEAR;

    const int2 gid = (int2)(get_global_id(0), get_global_id(1));
    const int2 lid = (int2)(get_local_id(0), get_local_id(1));

    const int2 lvl2 = (int2)(0,0);
    const int2 lvl3 = (int2)(WIDTH / 2, 0);
    const int2 lvl4 = (int2)(WIDTH / 2, HEIGHT / 4);

#define DIM 16

    __local uchar left_pixels[DIM*DIM];
    __local uchar right_pixels[DIM*DIM];

    left_pixels[lid.y * DIM + lid.x] = (uchar)read_imageui(left, sampler, gid).x;
    right_pixels[lid.y * DIM + lid.x] = (uchar)read_imageui(right, sampler, gid).x;

    if(gid.x >= WIDTH || gid.y >= HEIGHT)
        return;

    /* fill lvl2 */
    l[(gid.y/2) * WIDTH + (gid.x/2)] = left_pixels[lid.y * DIM + lid.x];
    r[(gid.y/2) * WIDTH + (gid.x/2)] = right_pixels[lid.y * DIM + lid.x];

    /* fill lvl3 */
    int lvl3_offset = WIDTH/2;
    l[lvl3_offset + (gid.y/4) * WIDTH + (gid.x/4)] = left_pixels[lid.y * DIM + lid.x];
    r[lvl3_offset + (gid.y/4) * WIDTH + (gid.x/4)] = right_pixels[lid.y * DIM + lid.x];

    /* fill lvl4 */
    int lvl4_offset = ((HEIGHT / 4) * WIDTH) + (WIDTH / 2);
    l[lvl4_offset + (gid.y/8) * WIDTH + (gid.x/8)] = left_pixels[lid.y * DIM + lid.x];
    r[lvl4_offset + (gid.y/8) * WIDTH + (gid.x/8)] = right_pixels[lid.y * DIM + lid.x];
}

__kernel void createMipMap_image2d(__read_only image2d_t left,
                                   __read_only image2d_t right,
                                   __write_only image2d_t mipmap_left,
                                   __write_only image2d_t mipmap_right) {

    const sampler_t sampler = CLK_NORMALIZED_COORDS_FALSE | CLK_ADDRESS_CLAMP | CLK_FILTER_LINEAR;

    const int2 gid = (int2)(get_global_id(0), get_global_id(1));
    const int2 lid = (int2)(get_local_id(0), get_local_id(1));

    const int2 lvl2 = (int2)(0,0);
    const int2 lvl3 = (int2)(WIDTH / 2, 0);
    const int2 lvl4 = (int2)(WIDTH / 2, HEIGHT / 4);

#define DIM 16

    __local uchar left_pixels[DIM*DIM];
    __local uchar right_pixels[DIM*DIM];

    left_pixels[lid.y * DIM + lid.x] = (uchar)read_imageui(left, sampler, gid).x;
    right_pixels[lid.y * DIM + lid.x] = (uchar)read_imageui(right, sampler, gid).x;

    /*
     * image2d seems to be alot slower in this kernel
     */

    if(gid.x >= WIDTH || gid.y >= HEIGHT)
        return;

    /* fill lvl2 */
    int2 coords = (int2)(gid.x/2, gid.y/2);
    write_imageui(mipmap_left, coords, left_pixels[lid.y * DIM + lid.x]);
    write_imageui(mipmap_right, coords, right_pixels[lid.y * DIM + lid.x]);

    /* fill lvl3 */
    coords = (int2)(((gid.x/4) + lvl3.x), (gid.y/4));
    write_imageui(mipmap_left, coords, left_pixels[lid.y * DIM + lid.x]);
    write_imageui(mipmap_right, coords, right_pixels[lid.y * DIM + lid.x]);

    /* fill lvl4 */
    coords = (int2)((gid.x/8) + lvl4.x, (gid.y/8) + lvl4.y);
    write_imageui(mipmap_left, coords, left_pixels[lid.y * DIM + lid.x]);
    write_imageui(mipmap_right, coords, right_pixels[lid.y * DIM + lid.x]);
}




__kernel void calculateDisparityPyramid(const int miplvl,
                                        __read_only image2d_t image_l,
                                        __read_only image2d_t image_r,
                                        __global uchar *mipmap_l,
                                        __global uchar *mipmap_r,
                                        __write_only image2d_t result_l,
                                        __write_only image2d_t result_r,
                                        __local uchar *local_left,
                                        __local uchar *local_right,
                                        const int local_width,
                                        const int local_height
                                        ) {

    const sampler_t sampler = CLK_NORMALIZED_COORDS_FALSE | CLK_ADDRESS_CLAMP | CLK_FILTER_LINEAR;

    const int2 gid;
    const int2 lid;
    gid.x = get_global_id(0); gid.y = get_global_id(1);
    lid.x = get_local_id(0);  lid.y = get_local_id(1);

    const int mip_width = WIDTH / miplvl;
    const int mip_height = HEIGHT / miplvl;
    const int mip_max_disp = MAX_DISP / miplvl;

    if(gid.x >= mip_width || gid.y >= mip_height)
        return;

    int current_right_sum = 0;
    int current_left_sum = 0;
    uint best_left_sum = -1;
    uint best_right_sum = -1;
    uchar best_left_disparity = 0;
    uchar best_right_disparity = 0;

    __local int left_min_disp;
    __local int left_max_disp;

    __local int right_min_disp;
    __local int right_max_disp;

    uint local_left_min_disp = -1;
    uint local_left_max_disp = 0;

    uint local_right_min_disp = -1;
    uint local_right_max_disp = 0;


    int i = 0;
    int j = 0;
    int d = 0;

    int2 mip_offset;
    int2 mip_offset_lower_lvl;
    switch(miplvl) {
        case 1:
            mip_offset = (int2)(0,0);
            mip_offset_lower_lvl = (int2)(0,0);
        case 2:
            mip_offset = (int2)(0,0);
            mip_offset_lower_lvl = (int2)(WIDTH / 2, 0);
            break;
        case 4:
            mip_offset = (int2)(WIDTH / 2, 0);
            mip_offset_lower_lvl = (int2)(WIDTH / 2, (HEIGHT / 4));
            break;
        case 8:
            mip_offset = (int2)(WIDTH / 2, (HEIGHT / 4));
            break;
    }

    int lidd = lid.y * get_local_size(1) + lid.x;
    int cutoff = (get_local_size(0) * get_local_size(1));

    int2 coords;
    /* Transfer the previous levels disparities */
    if(miplvl < 8) {
        cutoff /= 2;
        if(lidd  < cutoff) {
            local_left[lidd] = mipmap_l[((gid.y)+mip_offset_lower_lvl.y) * WIDTH + ((gid.x)+mip_offset_lower_lvl.x)];
            local_right[lidd] = mipmap_r[((gid.y)+mip_offset_lower_lvl.y) * WIDTH + ((gid.x)+mip_offset_lower_lvl.x)];
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if(lidd == 0) {

            for(i = 0; i < cutoff; i++) {
                if(local_left[i] < local_left_min_disp)
                    local_left_min_disp = local_left[i];
                if(local_left[i] > local_left_max_disp)
                    local_left_max_disp = local_left[i];
            }
            left_max_disp = local_left_max_disp;
            left_min_disp = local_left_min_disp;

            for(i = 0; i < cutoff; i++) {
                if(local_right[i] < local_right_min_disp)
                    local_right_min_disp = local_right[i];
                if(local_right[i] > local_right_max_disp)
                    local_right_max_disp = local_right[i];
            }
            right_max_disp = local_right_max_disp;
            right_min_disp = local_right_min_disp;
        }

        barrier(CLK_LOCAL_MEM_FENCE);

    }

    /* left_min_disp = ((int)step(0.0, left_min_disp - 4.0) * 4 - left_min_disp); */
    /* left_max_disp = ((int)step(255.0/(miplvl*2), left_max_disp + 4.0) * 4 + left_max_disp)*2; */

    /* right_min_disp = ((int)step(0.0, right_min_disp - 4.0) * 4 - right_min_disp); */
    /* right_max_disp = ((int)step(255.0/(miplvl*2), right_max_disp + 4.0) * 4 + right_max_disp)*2; */

    if(lidd == 0) {

        if(miplvl == 8) {
            left_min_disp = 0;
            left_max_disp = mip_max_disp;

            right_min_disp = 0;
            right_max_disp = mip_max_disp;

        } else {

            /* left_min_disp *= 2; */
            /* left_max_disp *= 2; */

            /* right_min_disp *= 2; */
            /* right_max_disp *= 2; */

            left_min_disp = (left_min_disp - 2) < 0 ? 0 : left_min_disp - 2;
            left_max_disp = (left_max_disp + 2) < mip_max_disp ? left_max_disp+2 : mip_max_disp;

            right_min_disp = (right_min_disp - 2) < 0 ? 0 : right_min_disp - 2;;
            right_max_disp = (right_max_disp + 2) < mip_max_disp ? right_max_disp+2 : mip_max_disp;
        }
    }


    /* left_min_disp = 0; */
    /* left_max_disp = mip_max_disp; */

    /* right_min_disp = 0; */
    /* right_max_disp = mip_max_disp; */



    barrier(CLK_LOCAL_MEM_FENCE);



    if(miplvl == 1) {

        /* fill the left local memory buffer */
        for(i = 0; i < local_height; i += get_local_size(1)) {

            coords.y = gid.y + mip_offset.y - AGGR_RADIUS + i;

            for(j = 0; j < local_width; j += get_local_size(0)) {

                coords.x = gid.x - AGGR_RADIUS + j + mip_offset.x;
                local_left[(lid.y + i) * local_width + (lid.x + j)] =
                    (uchar)read_imageui(image_l, sampler, coords).x;

                coords.x = coords.x - mip_max_disp;
                local_right[(lid.y + i) * local_width + (lid.x + j)] =
                    (uchar)read_imageui(image_r, sampler, coords).x;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);

    } else {

        /* fill the left local memory buffer */
        for(i = 0; i < local_height; i += get_local_size(1)) {

            coords.y = gid.y + mip_offset.y - AGGR_RADIUS + i;

            for(j = 0; j < local_width; j += get_local_size(0)) {

                coords.x = gid.x - AGGR_RADIUS + j + mip_offset.x;
                local_left[(lid.y + i) * local_width + (lid.x + j)] =
                    mipmap_l[coords.y * WIDTH + coords.x];

                coords.x = coords.x - mip_max_disp;
                local_right[(lid.y + i) * local_width + (lid.x + j)] =
                    mipmap_r[coords.y * WIDTH + coords.x];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);

    }


    /* find the best match */
    /* First for the left disparity map */
    for(d = left_min_disp; d < left_max_disp; d++) {
        for(i = 0; i < AGGR_DIM; i++) {
            for(j = 0; j < AGGR_DIM; j++) {
                current_left_sum += abs(local_left[((lid.y+i) * local_width) + lid.x + j] -
                                        local_right[((lid.y+i) * local_width) + lid.x + j - d + mip_max_disp]);

                /* current_right_sum += abs(local_right[((lid.y+i) * local_width) + lid.x + j + mip_max_disp] - */
                /*                          local_left[((lid.y+i) * local_width) + lid.x + j + d]); */
            }
        }

        if(current_left_sum < best_left_sum) {
            best_left_sum = current_left_sum;
            best_left_disparity = d;
        }
        current_left_sum = 0;

        /* if(current_right_sum < best_right_sum) { */
        /*     best_right_sum = current_right_sum; */
        /*     best_right_disparity = d; */
        /* } */
        /* current_right_sum = 0; */

    }
    barrier(CLK_LOCAL_MEM_FENCE);

    /* Then for the right disparity map */
    for(d = right_min_disp; d < right_max_disp; d++) {
        for(i = 0; i < AGGR_DIM; i++) {
            for(j = 0; j < AGGR_DIM; j++) {

                current_right_sum += abs(local_right[((lid.y+i) * local_width) + lid.x + j + mip_max_disp] -
                                         local_left[((lid.y+i) * local_width) + lid.x + j + d]);
            }
        }

        if(current_right_sum < best_right_sum) {
            best_right_sum = current_right_sum;
            best_right_disparity = d;
        }
        current_right_sum = 0;

    }
    barrier(CLK_LOCAL_MEM_FENCE);


    if(miplvl == 1) {
        write_imageui(result_l, gid, best_left_disparity);
        write_imageui(result_r, gid, best_right_disparity);
    } else {
        mipmap_l[(gid.y+mip_offset.y) * WIDTH + (gid.x+mip_offset.x)] = best_left_disparity;
        mipmap_r[(gid.y+mip_offset.y) * WIDTH + (gid.x+mip_offset.x)] = best_right_disparity;
    }
}




__kernel void crossCheck(const __global uchar *left_result,
                         const __global uchar *right_result,
                         __global uchar *new_left,
                         __global uchar *new_right) {

    const int2 gid;
    const int2 lid;
    gid.x = get_global_id(0); gid.y = get_global_id(1);
    lid.x = get_local_id(0);  lid.y = get_local_id(1);

    if(gid.x < WIDTH) {

        int left_disparity = left_result[gid.y * WIDTH + gid.x];
        int right_disparity = right_result[gid.y * WIDTH + gid.x - left_disparity];

        if(abs(left_disparity - right_disparity) > 2) {
            new_left[gid.y * WIDTH + gid.x] = 0;
        } else {
            new_left[gid.y * WIDTH + gid.x] = left_result[gid.y * WIDTH + gid.x];
        }

        right_disparity = right_result[gid.y * WIDTH + gid.x];
        left_disparity = left_result[gid.y * WIDTH + gid.x + right_disparity];

        if(abs(right_disparity - left_disparity) > 1) {
            new_right[gid.y * WIDTH + gid.x] = 0;
        } else {
            new_right[gid.y * WIDTH + gid.x] = right_result[gid.y * WIDTH + gid.x];
        }
    }
}

__kernel void crossCheck_texture(__read_only image2d_t left_result,
                                 __read_only image2d_t right_result,
                                 __write_only image2d_t new_left,
                                 __write_only image2d_t new_right) {

    const int2 gid;
    const int2 lid;
    gid.x = get_global_id(0); gid.y = get_global_id(1);
    lid.x = get_local_id(0);  lid.y = get_local_id(1);

    const sampler_t sampler = CLK_NORMALIZED_COORDS_FALSE|CLK_ADDRESS_CLAMP|CLK_FILTER_LINEAR;

    if(gid.x < WIDTH) {

        uchar left_disparity = (uchar) read_imageui(left_result, sampler, gid).x;
        uchar right_disparity = (uchar) read_imageui(right_result, sampler, (int2)(gid.x-left_disparity, gid.y)).x;

        if(abs(left_disparity - right_disparity) > 2) {
            write_imageui(new_left, gid, 0);
        } else {
            write_imageui(new_left, gid, left_disparity);
        }

        right_disparity = (uchar) read_imageui(right_result, sampler, gid).x;
        left_disparity = (uchar) read_imageui(left_result, sampler, (int2)(gid.x + right_disparity, gid.y)).x;

        if(abs(right_disparity - left_disparity) > 1) {
            write_imageui(new_right, gid, 0);
        } else {
            write_imageui(new_right, gid, right_disparity);
        }
    }
}



__kernel void normalizeResults(__global uchar *left,
                               __global uchar *right) {

    const int2 gid;
    const int2 lid;
    gid.x = get_global_id(0); gid.y = get_global_id(1);
    lid.x = get_local_id(0);  lid.y = get_local_id(1);

    if(gid.x < WIDTH) {

        left[gid.y * WIDTH + gid.x] = (left[gid.y * WIDTH + gid.x]/(float)MAX_DISP)*255;
        right[gid.y * WIDTH + gid.x] = (right[gid.y * WIDTH + gid.x]/(float)MAX_DISP)*255;
    }

}



__kernel void diffFrames(const __global uchar *new_img_l,
                         const __global uchar *new_img_r,
                         const __global uchar *prev_img_l,
                         const __global uchar *prev_img_r,
                         __global uchar *diff_map,
                         __global uchar *result) {

    __local int changed;
    changed = 0;

    int sum = 0;

    int sum_left = 0;
    int sum_right = 0;

    int sum_new_left = 0;
    int sum_new_right = 0;

    const int2 gid;
    const int2 lid;
    gid.x = get_global_id(0); gid.y = get_global_id(1);
    lid.x = get_local_id(0);  lid.y = get_local_id(1);

    int i = 0;
    int j = 0;
    int max = AGGR_DIM * AGGR_DIM * 255;
    float brightness = 0;

    for(i = 0; i < AGGR_DIM; i++) {
        for(j = 0; j < AGGR_DIM; j++) {
            sum_left += abs((int)prev_img_l[(gid.y-AGGR_RADIUS+i) * PADDED_WIDTH + gid.x-AGGR_RADIUS + j] - (int)new_img_l[(gid.y-AGGR_RADIUS+i) * PADDED_WIDTH + gid.x-AGGR_RADIUS + j]);

            sum_right += abs((int)prev_img_r[(gid.y-AGGR_RADIUS+i) * PADDED_WIDTH + gid.x-AGGR_RADIUS + j]- (int)new_img_r[(gid.y-AGGR_RADIUS+i) * PADDED_WIDTH + gid.x-AGGR_RADIUS + j]);

            brightness += prev_img_r[(gid.y-AGGR_RADIUS+i) * PADDED_WIDTH + gid.x-AGGR_RADIUS + j] / ((float)AGGR_DIM*AGGR_DIM);
        }
    }

    int thresh = 10;// 255/brightness; // % change between the new and
    // previous frame
    int left_value = (((float)sum_left)/max)*100;
    int right_value = (((float)sum_right)/max)*100;
    if(left_value > thresh || right_value > thresh)
        changed = 1;



    // sum += ((sum_left/max) * 100.0) + ((sum_new_left/max) * 100.0);
    // sum += ((sum_right/max)*100.0) + ((sum_new_right/max)*100.0);

    // if(sum > 5)
    //     changed = 1;
    barrier(CLK_LOCAL_MEM_FENCE);

    if(changed == 1) {
        diff_map[gid.y * WIDTH + gid.x] = 255;
        //result[gid.y * WIDTH + gid.x] = 255;
    } else {
        diff_map[gid.y * WIDTH + gid.x] = 0;
        //result[gid.y * WIDTH + gid.x] = 0;
    }
    //result[gid.y * WIDTH + gid.x] = left_value;
}



/*
 *
 * Slow versions of some of the above kernels
 *
 */


__kernel void calculateDisparityDual_texture_memory(__read_only image2d_t image_l,
                                                    __read_only image2d_t image_r,
                                                    __write_only image2d_t result_l,
                                                    __write_only image2d_t result_r,
                                                    __local uchar *local_l,
                                                    __local uchar *local_r,
                                                    const int local_width,
                                                    const int local_height) {

    const sampler_t sampler = CLK_NORMALIZED_COORDS_FALSE|CLK_ADDRESS_CLAMP|CLK_FILTER_LINEAR;

    const int2 gid;
    const int2 lid;
    gid.x = get_global_id(0); gid.y = get_global_id(1);
    lid.x = get_local_id(0);  lid.y = get_local_id(1);

    int current_right_sum = 0;
    int current_left_sum = 0;
    uint best_left_sum = -1;
    uint best_right_sum = -1;
    uchar best_left_disparity = 0;
    uchar best_right_disparity = 0;

    int i = 0;
    int j = 0;
    int d = 0;

    int2 coords;
    uint4 pixel = {0,0,0,0};

    /* fill the left local memory buffer */
    for(i = 0; i < local_height; i += get_local_size(1)) {
        coords.y = gid.y - AGGR_RADIUS + i;
        for(j = 0; j < local_width; j += get_local_size(0)) {
            coords.x = gid.x - AGGR_RADIUS + j;
            pixel = read_imageui(image_l, sampler, coords);
            local_l[(lid.y + i) * local_width + (lid.x + j)] = (uchar)pixel.x;

            coords.x -= MAX_DISP;
            pixel = read_imageui(image_r, sampler, coords);
            local_r[(lid.y + i) * local_width + (lid.x + j)] = (uchar)pixel.x;

        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);

    /* find the best match */
    for(d = 0; d < MAX_DISP; d++) {
        for(i = 0; i < AGGR_DIM; i++) {
            for(j = 0; j < AGGR_DIM; j++) {
                current_left_sum += abs(local_l[((lid.y+i) * local_width) + lid.x + j] -
                                        local_r[((lid.y+i) * local_width) + lid.x + j - d + MAX_DISP]);

                current_right_sum += abs(local_r[((lid.y+i) * local_width) + lid.x + j + MAX_DISP] -
                                         local_l[((lid.y+i) * local_width) + lid.x + j + d]);
            }
        }

        if(current_left_sum < best_left_sum) {
            best_left_sum = current_left_sum;
            best_left_disparity = d;
        }
        current_left_sum = 0;

        if(current_right_sum < best_right_sum) {
            best_right_sum = current_right_sum;
            best_right_disparity = d;
        }
        current_right_sum = 0;

    }
    barrier(CLK_LOCAL_MEM_FENCE);


    if(gid.x < WIDTH && gid.y < HEIGHT) {
        write_imageui(result_l, gid, best_left_disparity);
        write_imageui(result_r, gid, best_right_disparity);
    }
}

/*
 * each work-item calculates max_disp costs
 */
__kernel void simpleAbsoluteDifference(const __global uchar *left_img,
                                       const __global uchar *right_img,
                                       __global uchar *costs) {

    const int gx = get_global_id(0);
    const int gy = get_global_id(1);
    const int lx = get_local_id(0);
    const int ly = get_local_id(1);

    /* check if work item is inside the bounds */
    if(gx < WIDTH - MAX_DISP) {
        int image_size = SIZE;
        int i;
        int pixel = (int)left_img[gy*WIDTH+gx];
        for(i = 0; i < MAX_DISP; i++) {
            costs[gy * WIDTH + gx + i*image_size] = abs((int)pixel - (int)right_img[gy*WIDTH+gx-i]);
        }
    }
}

/*
 * Same as simpleAbsoluteDifference, but with caching into local memory
 */
__kernel void lmemAbsoluteDifference(const __global uchar *left_img,
                                     const __global uchar *right_img,
                                     __global uchar *costs,
                                     __local uchar *lmem) {

    int2 g_coords, l_coords;
    g_coords.x = get_global_id(0);
    g_coords.y = get_global_id(1);

    l_coords.x = get_local_id(0);
    l_coords.y = get_local_id(1);

    /* check if work item is inside the bounds */
    if(g_coords.x < WIDTH) {
        int image_size = SIZE;
        int i;
        uchar pixel = left_img[g_coords.y * WIDTH + g_coords.x];

        /* move data from global to local memory */
        //for(i = 0; i < max_disp; i += get_local_size(0)) {
        lmem[l_coords.x + MAX_DISP] = right_img[g_coords.y * WIDTH + g_coords.x];
        if(g_coords.x >= MAX_DISP)
            lmem[l_coords.x] = right_img[g_coords.y * WIDTH + g_coords.x - MAX_DISP];
        //}
        barrier(CLK_LOCAL_MEM_FENCE);

        for(i = 0; i < MAX_DISP; i++) {
            costs[g_coords.y * WIDTH + g_coords.x + i * image_size] = abs((int)pixel - (int)lmem[l_coords.x+MAX_DISP-i]);
        }
    }
}


__kernel void calculateDisparityPyramid_slow_as_hell(__read_only image2d_t img_l,
                                                     __read_only image2d_t img_r,
                                                     __global uchar *result_l,
                                                     __global uchar *result_r,
                                                     const int level) {

    const sampler_t sampler = CLK_NORMALIZED_COORDS_FALSE | CLK_ADDRESS_CLAMP | CLK_FILTER_NEAREST;

    const int2 gid;
    const int2 lid;
    gid.x = get_global_id(0); gid.y = get_global_id(1);
    lid.x = get_local_id(0);  lid.y = get_local_id(1);

    int current_left_sum = 0;
    uint best_left_sum = -1;
    int best_left_disparity = 0;
    int current_right_sum = 0;
    uint best_right_sum = -1;
    int best_right_disparity = 0;

    uint4 left_pixel = {0,0,0,0};
    uint4 right_pixel = {0,0,0,0};
    int2 coords;


    for(int d = 0; d < MAX_DISP; d++) {
        for(int i = 0; i < AGGR_DIM; i++) {
            coords.y = (gid.y*level)-AGGR_DIM + i*level;
            for(int j = 0; j < AGGR_DIM; j++) {

                coords.x = (gid.x*level)-AGGR_RADIUS + j*level;
                left_pixel = read_imageui(img_l, sampler, coords);

                coords.x = coords.x  - d*level;
                right_pixel = read_imageui(img_r, sampler, coords);

                current_left_sum += abs((int)left_pixel.x - (int)right_pixel.x);

                coords.x = (gid.x*level)-AGGR_RADIUS + j*level;
                right_pixel = read_imageui(img_r, sampler, coords);
                coords.x += d*level;
                left_pixel = read_imageui(img_l, sampler, coords);

                current_right_sum += abs((int)right_pixel.x - (int)left_pixel.x);
            }
        }
        if(current_left_sum < best_left_sum) {
            best_left_sum = current_left_sum;
            best_left_disparity = d;
        }
        current_left_sum = 0;
        if(current_right_sum < best_right_sum) {
            best_right_sum = current_right_sum;
            best_right_disparity = d;
        }
        current_right_sum = 0;

    }
    if(gid.x < WIDTH) {
        result_l[gid.y * WIDTH + gid.x] = best_left_disparity;
        result_r[gid.y * WIDTH + gid.x] = best_right_disparity;
    }

}

__kernel void calculateDisparity_no_defines(const __global uchar *img_l,
                                            const __global uchar *img_r,
                                            const int width,
                                            const int max_disp,
                                            const int aggr_dim,
                                            __global uchar *result) {

    const int x = get_global_id(0), y = get_global_id(1);
    const int offset_x = x - aggr_dim/2;
    const int offset_y = y - aggr_dim/2;


    if(offset_x >= 0 && offset_x + aggr_dim < width) {
        unsigned int sum = 0, best_sum = -1, best_d = 0;
        for(int d = 0; d < max_disp; d++) {
            for(int i = offset_y; i < aggr_dim + offset_y; i++) {
                for(int j = offset_x; j < aggr_dim + offset_x; j++) {
                    sum += abs((int)img_l[i * width + j] - (int)img_r[i * width + j - d]);
                }
            }
            if(sum < best_sum) {
                best_sum = sum;
                best_d = d;
            }
            sum = 0;
        }
        result[y * WIDTH + x] = best_d;
    }
}


__kernel void calculateDisparityLMEM_no_defines(const __global uchar *img_l,
                                                const __global uchar *img_r,
                                                __global uchar *result,
                                                __global uchar *prev_result,
                                                __local uchar *local_left,
                                                const int local_left_width,
                                                const int local_left_height,
                                                __local uchar *local_right,
                                                const int local_right_width,
                                                const int local_right_height,
                                                __global uchar *diff_map,
                                                const int width,
                                                const int height,
                                                const int padded_width,
                                                const int box_dim,
                                                const int max_disp
                                                ) {

    const int2 gid;
    const int2 lid;
    gid.x = get_global_id(0); gid.y = get_global_id(1);
    lid.x = get_local_id(0);  lid.y = get_local_id(1);

    int current_sum = 0;
    uint best_sum = -1;
    int best_disparity = 0;

    int i = 0;
    int j = 0;
    int d = 0;

    //    if(gid.x < width && gid.y < height) {

    if(diff_map[gid.y * width + gid.x] == 0) {

        result[gid.y * width + gid.x] = prev_result[gid.y * width + gid.x];

    } else {

        /* fill the left local memory buffer */
        for(i = 0; i < local_left_height; i += get_local_size(1)) {
            for(j = 0; j < local_left_width; j += get_local_size(0)) {
                local_left[(lid.y + i) * local_left_width + (lid.x + j)] =
                    img_l[((gid.y + i - (box_dim/2)) * padded_width + (gid.x - (box_dim/2) + j))];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);

        /* fill the right local memory buffer */
        for(i = 0; i < local_right_height; i += get_local_size(1)) {
            for(j = 0; j < local_right_width; j += get_local_size(0)) {
                local_right[(lid.y + i) * local_right_width + (lid.x + j)] =
                    img_r[((gid.y-(box_dim/2) + i) * padded_width + (gid.x-(box_dim/2) + j - max_disp))];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);

        /* if the global id is within the bounds, calculate the Sum of
           Absolute differece */

        for(d = 0; d < max_disp; d++) {
            for(i = 0; i < box_dim; i++) {
                for(j = 0; j < box_dim; j++) {
                    current_sum += abs(local_left[(lid.y+i)*local_left_width+(lid.x+j)] -
                                       local_right[(lid.y+i)*local_right_width+(lid.x+j) - d + max_disp]);
                }
            }
            if(current_sum < best_sum) {
                best_sum = current_sum;
                best_disparity = d;
            }
            current_sum = 0;
        }

        barrier(CLK_LOCAL_MEM_FENCE);

        result[gid.y * width + gid.x] = best_disparity;
    }
    //    }

}
